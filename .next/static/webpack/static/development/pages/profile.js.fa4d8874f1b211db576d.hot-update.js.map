{"version":3,"file":"static/webpack/static/development/pages/profile.js.fa4d8874f1b211db576d.hot-update.js","sources":["webpack:///./components/profile/profilePic.js"],"sourcesContent":["import React, { useState,useEffect, useContext } from 'react'\n\nimport { ProfileContext } from '../../store/contexts/profileContext'\n\nimport Navbar from '../layouts/navbar'\n\nimport '../../public/assets/style.scss';\n\nimport Logout from '../../utility/logout'\n\n\nimport ReactCrop from 'react-image-crop'\n\nimport 'react-image-crop/dist/ReactCrop.css';\n\n\nimport  { base64StringtoFile,  extractImageFileExtensionFromBase64, image64toCanvasRef} from './fileUtility'\nimport axiosFuncs from '../../utility/axios';\n\n\nimport Validator from 'validatorjs';\n\n\n\n //   const cropper = React.createRef(null);\n\nconst ProfilePic = (props) => {\n\n\n\n      const { dispatch  } = useContext(ProfileContext);\n\n      const imagePreviewCanvasRef = React.createRef();\n\n      const [profilePic, setProfilePic] = useState(\n              {\n    \n                profileStep: 7,\n                profilePicUrl: '',\n                profilePicFile: '',\n                crop: {\n                // unit: 'px',\n                  aspect: 1 / 1 ,\n              //    width: 50,\n                } \n\n\n              })\n\n  const [buttonStateF, setButtonStateF] = useState(true);\n  const [buttonStateB, setButtonStateB] = useState(false);\n                  \n  let rules = {\n\n    profilePicUrl: 'required',\n    profilePicFile: 'required',\n   \n\n  //  email: 'required|email',\n  //  age: 'min:18'\n  };\n  \n  let validation = new Validator(profilePic, rules, { required: 'required*' });\n\n  validation.fails(); // true\n  validation.passes(); // false\n\n\n\n\n  useEffect(() => {\n\n    if (validation.passes()) {\n            setButtonStateF(false);\n          // console.log(\"the   buttonStete \"+buttonState);  \n      }else{\n        setButtonStateF(true);\n      \n  }\n},[profilePic]);\n\n\n  const handleImageChange = (e) => {\n            e.preventDefault();\n\n            let reader = new FileReader();\n            let profilePicFile = e.target.files[0];\n\n        //   console.log(\"this is the imagfe check view ===================>>>>>>>>>>>>>\" +profilePicFile);\n\n            reader.onloadend = () => {\n                setProfilePic({ ...profilePic, profilePicFile: profilePicFile, profilePicUrl: reader.result })  \n            }\n\n            reader.readAsDataURL(profilePicFile)\n          }\n// from here\n\n\n\nconst handleCrop = (crop, percentCrop) => {\n\n  console.log(\"this is the crop \"+JSON.stringify(crop));\n\n  console.log(\"this is the percent crop \"+JSON.stringify(percentCrop));\n\n\n  //onComplete(crop, percentCrop)\n  setProfilePic({ ...profilePic,  crop: percentCrop })  \n\n}\n\nconst handleImageLoaded = (image) => {\n\n            console.log(\"the image that is loaded\"+image);\n          \n          }\n          \nconst handleCompleteCrop = (crop, pixelCrop) => {\n\n console.log(\"the crop and the pixel \"+JSON.stringify(crop) + JSON.stringify(pixelCrop));\n\n  const canvasRef = imagePreviewCanvasRef.current\n\n  const imgSrc = profilePic.profilePicUrl\n\n  image64toCanvasRef(canvasRef, imgSrc, crop)\n\n}\n\n\n// save the successfully cropped image to state \nconst handleImageSaveWithCrop = (e) => {\n\n  e.preventDefault();\n\n  const canvasRef = imagePreviewCanvasRef.current\n  const imgSrc = profilePic.profilePicUrl\n  const fileExtension = extractImageFileExtensionFromBase64(imgSrc)\n  const imageDate64 = canvasRef.toDataURL('image/'+ fileExtension)\n\n  console.log(\"the profilePicFile extension is this ===>> \"+fileExtension);\n\n  const newFileName = \"nomalevo.\" + fileExtension\n\n  console.log(\"the new profilePicFile name \"+newFileName);\n\n  // profilePicFile to be uploaded\n  const newCroppedFile = base64StringtoFile(imageDate64, newFileName)\n\n//   console.log(\"this si the final cropped \"+JSON.stringify(newCroppedFile));\n\n//  console.log(\"this is the imagfe check view cropped profilePicFile ===================>>>>>>>>>>>>>\" +newCroppedFile);\n     setProfilePic({ ...profilePic, profilePicFile: newCroppedFile })  \n\n\n\n  const stateObj = {\n      profileStep:8,\n      profilePicUrl: profilePic.profilePicUrl,\n      profilePicFile: newCroppedFile\n\n    }\n\n//     this.props.fileStateUpdate(profilePic);\n\n\n  //props.fileStateUpdate(stateObj);\n\n\n   //download the profilePicFile\n// downloadBase64File(imageDate64, newFileName)\n\n\n\n\n\n\n}\n\n\n\n// save the image  to state without cropping it\nconst handleImageSaveWithoutCrop = (e) => {\n  e.preventDefault();\n\n  // setProfilePic({ ...profilePic, profilePicFile: newCroppedFile })  \n\n  // this.setState({\n  //   profileStep: 8\n  //  // profilePicFile: newCroppedFile   \n  //   })\n\n  //   const stateObj = {\n  //     profileStep:8,\n  //     profilePicUrl: profilePic.profilePicUrl,\n  //     profilePicFile: profilePic.profilePicFile,\n\n  //   }\n  //   //   this.props.fileStateUpdate(profilePicj);\n\n\n  // this.props.fileStateUpdate(stateObj);\n\n\n\n}\n\n\n\n\nconst checkToSkipCrop = () => {\n\n  if(profilePic.profilePicUrl){\n    return \"inline\"\n  } else {\n    return \"none\"\n  }\n  \n\n}\n\n\nconst checkToUpladCropped = () => {\n\n  if(profilePic.crop.height){\n    return \"inline\"\n  } else {\n    return \"none\"\n  }\n\n}\n\nconst styles = {\n  // height: '50vh',\n  //   minHeight: '93vh'\n    width:\"200\" ,\n   height:\"500\"\n  }\n\nconst conStyle = {\n    // height: '50vh',\n    //   minHeight: '93vh'\n   //   display:\"inline\"\n   cropped : { display: checkToUpladCropped() },\n   notCropped : { display: checkToSkipCrop() }\n      \n    }\n\n\n// to here\n\n// const  handleChange =(e) => {\n//         e.preventDefault(); \n//         setProfilePic({ ...profilePic, [e.target.id]: e.target.value })\n\n//       }\n\n\nconst handleForward = async e => {\n\n        e.preventDefault();\n        //   dispatch({type: 'ADD_PROFILE_DATA', payload: profilePic});\n        dispatch({type: 'ADD_PROFILE_DATA', payload: {profilePic: profilePic}});\n\n        const next = \"F\"\n        const go = await props.updatestep(next);\n        dispatch({type: 'CURRENT_STEP', payload: profilePic.profileStep+1});\n        if(go){\n        return go\n        }\n\n        }\n\nconst handleBack = async e => {\n\n        e.preventDefault();\n\n        const next = \"B\"\n        const go = await props.updatestep(next);\n        dispatch({type: 'CURRENT_STEP', payload: profilePic.profileStep-1});\n        if(go){\n\n        return go\n        }\n\n        }\n\n\nconst handleSaveNow = async e => {\n\n\n      //  console.log(\"i am here to save first foitiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\");\n\n      e.preventDefault();\n\n      // const data =  {...profilePic,  profileStep: profilePic.profileStep+1};\n      \n\n\n      dispatch({type: 'CLEAR_CONTEXT'});\n      Logout();\n\n      //logout();\n\n      }\n\n \n\n\n  return (\n\n\n\n    <div className=\"pagegrid\">\n      <Navbar />\n\n        <div className=\"innergrid\">\n\n            <div className=\"profile-form\" >\n\n            <h3>Profile Pic</h3>\n\n\n            <div className=\"one-column-row\">\n                  <div className=\"column\">\n                                      \n                    <div style={conStyle.notCropped} >Drag you mouse over the image to crop or click the button below to skip</div>\n                    <input  type='file' id=\"profilePic\" onChange={(e)=>handleImageChange(e)} />\n                 \n                      \n                  </div>\n            </div>\n\n            <div className=\"two-column-row\">\n                  <div className=\"column\">\n                                      \n                      <ReactCrop \n                      src={profilePic.profilePicUrl}\n                      onImageLoaded={handleImageLoaded}\n                      onComplete={handleCompleteCrop} \n                      circularCrop=\"true\"\n                      crop={profilePic.crop} \n                      onChange={handleCrop} />\n\n                      <button style={conStyle.notCropped} onClick={handleImageSaveWithoutCrop}> Skip Cropping And Upload Image </button>\n\n              \n                  </div>\n                  <div className=\"column\">\n                    <canvas ref={imagePreviewCanvasRef} style={styles} ></canvas> \n                    <button  style={conStyle.cropped} onClick={handleImageSaveWithCrop}> Upload  Cropped Image </button>\n        \n                  </div>\n            </div>\n\n\n\n\n\n            <div className=\"two-column-row\">\n                      <div className=\"column\">\n                         <button disabled={buttonStateB}  size=\"small\" color=\"primary\" onClick={handleBack}>Back</button>\n                      </div>\n                  \n                      <div className=\"column\">\n                         <button disabled={buttonStateF} size=\"small\" color=\"primary\" onClick={handleForward}>Next</button>\n                      </div>\n                \n                </div>\n                      <div className=\"one-column-row\">\n                      <div className=\"column componentFooter\">\n                         <span>6/6</span>\n                      </div>\n                  </div>\n                 \n\n            </div>\n        </div>\n    </div>\n\n\n\n  )\n}\n\n\nexport default ProfilePic;\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAGA;AACA;AAGA;AACA;AAKA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AATA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAycA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAJA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAEA;;;;A","sourceRoot":""}