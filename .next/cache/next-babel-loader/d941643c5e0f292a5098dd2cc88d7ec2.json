{"ast":null,"code":"// Download a Base64-encoded file\nexport function downloadBase64File(base64Data, filename) {\n  var element = document.createElement('a');\n  element.setAttribute('href', base64Data);\n  element.setAttribute('download', filename);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n} // Convert a Base64-encoded string to a File object\n\nexport function base64StringtoFile(base64String, filename) {\n  var arr = base64String.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new File([u8arr], filename, {\n    type: mime\n  });\n} //Extract an Base64 Image's File Extension\n\nexport function extractImageFileExtensionFromBase64(base64Data) {\n  return base64Data.substring(\"data:image/\".length, base64Data.indexOf(\";base64\"));\n} //Base64 Image to Canvas with a Crop\n//This will crop your passed Base64 image to fit on to a canvas of the same exact crop.\n\nexport function image64toCanvasRef(canvasRef, image64, pixelCrop) {\n  var canvas = canvasRef; // document.createElement('canvas');\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  var ctx = canvas.getContext('2d');\n  var image = new Image();\n  image.src = image64;\n\n  image.onload = function () {\n    ctx.drawImage(image, pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height, 0, 0, pixelCrop.width, pixelCrop.height);\n  };\n}","map":{"version":3,"sources":["/home/noa/ntdbProject/app/NTDB/components/profile/fileUtility.js"],"names":["downloadBase64File","base64Data","filename","element","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","base64StringtoFile","base64String","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","extractImageFileExtensionFromBase64","substring","indexOf","image64toCanvasRef","canvasRef","image64","pixelCrop","canvas","width","height","ctx","getContext","image","Image","src","onload","drawImage","x","y"],"mappings":"AAIA;AACC,OAAO,SAASA,kBAAT,CAA4BC,UAA5B,EAAwCC,QAAxC,EAAkD;AACxD,MAAIC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAd;AACAF,EAAAA,OAAO,CAACG,YAAR,CAAqB,MAArB,EAA6BL,UAA7B;AACAE,EAAAA,OAAO,CAACG,YAAR,CAAqB,UAArB,EAAiCJ,QAAjC;AACAC,EAAAA,OAAO,CAACI,KAAR,CAAcC,OAAd,GAAwB,MAAxB;AACAJ,EAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,OAA1B;AACAA,EAAAA,OAAO,CAACQ,KAAR;AACAP,EAAAA,QAAQ,CAACK,IAAT,CAAcG,WAAd,CAA0BT,OAA1B;AACD,C,CAGD;;AACA,OAAO,SAASU,kBAAT,CAA4BC,YAA5B,EAA0CZ,QAA1C,EAAoD;AACvD,MAAIa,GAAG,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAV;AAAA,MAAmCC,IAAI,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,EAAwB,CAAxB,CAA1C;AAAA,MACIC,IAAI,GAAGC,IAAI,CAACL,GAAG,CAAC,CAAD,CAAJ,CADf;AAAA,MACyBM,CAAC,GAAGF,IAAI,CAACG,MADlC;AAAA,MAC0CC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,CAAf,CADlD;;AAEA,SAAMA,CAAC,EAAP,EAAU;AACNE,IAAAA,KAAK,CAACF,CAAD,CAAL,GAAWF,IAAI,CAACM,UAAL,CAAgBJ,CAAhB,CAAX;AACH;;AACD,SAAO,IAAIK,IAAJ,CAAS,CAACH,KAAD,CAAT,EAAkBrB,QAAlB,EAA4B;AAACyB,IAAAA,IAAI,EAACV;AAAN,GAA5B,CAAP;AACH,C,CAID;;AACA,OAAO,SAASW,mCAAT,CAA6C3B,UAA7C,EAAwD;AAC3D,SAAOA,UAAU,CAAC4B,SAAX,CAAqB,cAAcP,MAAnC,EAA2CrB,UAAU,CAAC6B,OAAX,CAAmB,SAAnB,CAA3C,CAAP;AACH,C,CAGD;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAuCC,OAAvC,EAAgDC,SAAhD,EAA0D;AAE/D,MAAMC,MAAM,GAAGH,SAAf,CAF+D,CAEtC;;AACzBG,EAAAA,MAAM,CAACC,KAAP,GAAeF,SAAS,CAACE,KAAzB;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgBH,SAAS,CAACG,MAA1B;AACA,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;AACA,MAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,GAAN,GAAYT,OAAZ;;AACAO,EAAAA,KAAK,CAACG,MAAN,GAAe,YAAW;AACtBL,IAAAA,GAAG,CAACM,SAAJ,CACEJ,KADF,EAEEN,SAAS,CAACW,CAFZ,EAGEX,SAAS,CAACY,CAHZ,EAIEZ,SAAS,CAACE,KAJZ,EAKEF,SAAS,CAACG,MALZ,EAME,CANF,EAOE,CAPF,EAQEH,SAAS,CAACE,KARZ,EASEF,SAAS,CAACG,MATZ;AAWD,GAZH;AAaD","sourcesContent":["\n\n\n\n// Download a Base64-encoded file\n export function downloadBase64File(base64Data, filename) {\n  var element = document.createElement('a');\n  element.setAttribute('href', base64Data);\n  element.setAttribute('download', filename);\n  element.style.display = 'none';\n  document.body.appendChild(element);\n  element.click();\n  document.body.removeChild(element);\n}\n\n\n// Convert a Base64-encoded string to a File object\nexport function base64StringtoFile(base64String, filename) {\n    var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while(n--){\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, {type:mime});\n}\n\n\n\n//Extract an Base64 Image's File Extension\nexport function extractImageFileExtensionFromBase64(base64Data){\n    return base64Data.substring(\"data:image/\".length, base64Data.indexOf(\";base64\"))\n}\n\n\n//Base64 Image to Canvas with a Crop\n//This will crop your passed Base64 image to fit on to a canvas of the same exact crop.\n\nexport function image64toCanvasRef(canvasRef, image64, pixelCrop){\n    \n  const canvas = canvasRef // document.createElement('canvas');\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n  const ctx = canvas.getContext('2d');\n  const image = new Image()\n  image.src = image64\n  image.onload = function() {\n      ctx.drawImage(\n        image,\n        pixelCrop.x,\n        pixelCrop.y,\n        pixelCrop.width,\n        pixelCrop.height,\n        0,\n        0,\n        pixelCrop.width,\n        pixelCrop.height\n      )\n    }\n}"]},"metadata":{},"sourceType":"module"}